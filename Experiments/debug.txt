C:\Users\jllav\Anaconda3\envs\DAHFI\python.exe C:\Users\jllav\AppData\Roaming\JetBrains\IntelliJIdea2021.2\plugins\python\helpers\pydev\pydevd.py --multiproc --qt-support=auto --client 127.0.0.1 --port 24981 --file C:/Users/jllav/IdeaProjects/TFM/Experiments/Results/results_to_latex.py
Connected to pydev debugger (build 212.5284.40)
FFT_colors
Python 3.7.12 | packaged by conda-forge | (default, Oct 26 2021, 05:37:49) [MSC v.1916 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.31.1 -- An enhanced Interactive Python. Type '?' for help.
PyDev console: using IPython 7.31.1
Traceback (most recent call last):
  File "C:\Users\jllav\Anaconda3\envs\DAHFI\lib\site-packages\IPython\core\interactiveshell.py", line 3457, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "<ipython-input-1-9ce4db91df57>", line 1, in <module>
    FFT_colors
NameError: name 'FFT_colors' is not defined
FFT_colors
Out[2]: 
array([['green_14', 'green_10', 'green_23', 'green_22'],
       ['green_15', 'green_13', 'green_20', 'green_9'],
       ['green_8', 'green_17', 'green_1', 'green_12'],
       ['green_21', 'green_0', 'green_4', 'green_5'],
       ['green_18', 'green_6', 'green_3', 'green_2'],
       ['green_16', 'green_11', 'green_7', 'green_19']], dtype='<U8')
FFT_colors_idx
Out[3]: 
array([14, 10, 23, 22, 15, 13, 20,  9,  8, 17,  1, 12, 21,  0,  4,  5, 18,
        6,  3,  2, 16, 11,  7, 19], dtype=int64)
FFT_colors_idx.reshape((6,4))
Out[4]: 
array([[14, 10, 23, 22],
       [15, 13, 20,  9],
       [ 8, 17,  1, 12],
       [21,  0,  4,  5],
       [18,  6,  3,  2],
       [16, 11,  7, 19]], dtype=int64)
FFT_colors_idx.reshape((4,6)).T
Out[5]: 
array([[14, 20, 21,  3],
       [10,  9,  0,  2],
       [23,  8,  4, 16],
       [22, 17,  5, 11],
       [15,  1, 18,  7],
       [13, 12,  6, 19]], dtype=int64)
FFT_values
Traceback (most recent call last):
  File "C:\Users\jllav\Anaconda3\envs\DAHFI\lib\site-packages\IPython\core\interactiveshell.py", line 3457, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "<ipython-input-6-e8d0d474d79f>", line 1, in <module>
    FFT_values
NameError: name 'FFT_values' is not defined
FFT_values = data.loc[pd.IndexSlice[:, 'FFT'], :]['mean'].values
FFT_values
Out[8]: 
array([[0.52247153, 0.52838509, 0.51085145, 0.51301242],
       [0.51923913, 0.51815994, 0.51568064, 0.50592909],
       [0.53424689, 0.53785197, 0.56388716, 0.5060119 ],
       [0.52746118, 0.53914079, 0.56398033, 0.54267857],
       [0.51004658, 0.53154244, 0.51675207, 0.5       ],
       [0.5386646 , 0.52429089, 0.55496636, 0.55498188]])
np.dstack(np.unravel_index(np.argsort(FFT_values.ravel()), (4, 6)))
Out[9]: 
array([[[3, 1],
        [1, 1],
        [1, 5],
        [2, 4],
        [0, 2],
        [0, 3],
        [1, 0],
        [3, 0],
        [0, 5],
        [0, 4],
        [0, 0],
        [3, 3],
        [2, 0],
        [0, 1],
        [2, 5],
        [1, 2],
        [1, 3],
        [3, 2],
        [2, 1],
        [2, 3],
        [3, 4],
        [3, 5],
        [1, 4],
        [2, 2]]], dtype=int64)
np.argsort(FFT_values.ravel()), (4, 6)
Out[10]: 
(array([19,  7, 11, 16,  2,  3,  6, 18,  5,  4,  0, 21, 12,  1, 17,  8,  9,
        20, 13, 15, 22, 23, 10, 14], dtype=int64),
 (4, 6))
np.argsort(FFT_values.ravel())
Out[11]: 
array([19,  7, 11, 16,  2,  3,  6, 18,  5,  4,  0, 21, 12,  1, 17,  8,  9,
       20, 13, 15, 22, 23, 10, 14], dtype=int64)
np.argsort(FFT_values.ravel()).reshape((4,6))
Out[12]: 
array([[19,  7, 11, 16,  2,  3],
       [ 6, 18,  5,  4,  0, 21],
       [12,  1, 17,  8,  9, 20],
       [13, 15, 22, 23, 10, 14]], dtype=int64)
np.argsort(FFT_values.ravel()).reshape((6,4))
Out[13]: 
array([[19,  7, 11, 16],
       [ 2,  3,  6, 18],
       [ 5,  4,  0, 21],
       [12,  1, 17,  8],
       [ 9, 20, 13, 15],
       [22, 23, 10, 14]], dtype=int64)
np.dstack(np.unravel_index(np.argsort(FFT_values.ravel()), FFT_values.shape))
Out[14]: 
array([[[4, 3],
        [1, 3],
        [2, 3],
        [4, 0],
        [0, 2],
        [0, 3],
        [1, 2],
        [4, 2],
        [1, 1],
        [1, 0],
        [0, 0],
        [5, 1],
        [3, 0],
        [0, 1],
        [4, 1],
        [2, 0],
        [2, 1],
        [5, 0],
        [3, 1],
        [3, 3],
        [5, 2],
        [5, 3],
        [2, 2],
        [3, 2]]], dtype=int64)
np.unravel_index(np.argsort(FFT_values.ravel()), FFT_values.shape)
Out[15]: 
(array([4, 1, 2, 4, 0, 0, 1, 4, 1, 1, 0, 5, 3, 0, 4, 2, 2, 5, 3, 3, 5, 5,
        2, 3], dtype=int64),
 array([3, 3, 3, 0, 2, 3, 2, 2, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 3, 2, 3,
        2, 2], dtype=int64))
np.unravel_index(np.argsort(FFT_values.ravel(), axis=None), FFT_values.shape)
Out[16]: 
(array([4, 1, 2, 4, 0, 0, 1, 4, 1, 1, 0, 5, 3, 0, 4, 2, 2, 5, 3, 3, 5, 5,
        2, 3], dtype=int64),
 array([3, 3, 3, 0, 2, 3, 2, 2, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 3, 2, 3,
        2, 2], dtype=int64))
np.unravel_index(np.argsort(FFT_values.ravel(), axis=None)[::-1], FFT_values.shape)
Out[17]: 
(array([3, 2, 5, 5, 3, 3, 5, 2, 2, 4, 0, 3, 5, 0, 1, 1, 4, 1, 0, 0, 4, 2,
        1, 4], dtype=int64),
 array([2, 2, 3, 2, 3, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 2, 2, 3, 2, 0, 3,
        3, 3], dtype=int64))
idx = np.unravel_index(np.argsort(FFT_values.ravel(), axis=None), FFT_values.shape)
FFT_values[idx]
Out[19]: 
array([0.5       , 0.50592909, 0.5060119 , 0.51004658, 0.51085145,
       0.51301242, 0.51568064, 0.51675207, 0.51815994, 0.51923913,
       0.52247153, 0.52429089, 0.52746118, 0.52838509, 0.53154244,
       0.53424689, 0.53785197, 0.5386646 , 0.53914079, 0.54267857,
       0.55496636, 0.55498188, 0.56388716, 0.56398033])
idx = np.unravel_index(np.argsort(FFT_values.ravel(), axis=None)[::-1], FFT_values.shape)
FFT_values[idx]
Out[21]: 
array([0.56398033, 0.56388716, 0.55498188, 0.55496636, 0.54267857,
       0.53914079, 0.5386646 , 0.53785197, 0.53424689, 0.53154244,
       0.52838509, 0.52746118, 0.52429089, 0.52247153, 0.51923913,
       0.51815994, 0.51675207, 0.51568064, 0.51301242, 0.51085145,
       0.51004658, 0.5060119 , 0.50592909, 0.5       ])
np.array([f'green_{i}' for i in range(24)])[idx]
Traceback (most recent call last):
  File "C:\Users\jllav\Anaconda3\envs\DAHFI\lib\site-packages\IPython\core\interactiveshell.py", line 3457, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "<ipython-input-22-7b977a4f9201>", line 1, in <module>
    np.array([f'green_{i}' for i in range(24)])[idx]
IndexError: too many indices for array: array is 1-dimensional, but 2 were indexed
np.array([f'green_{i}' for i in range(24)]).reshape((6,4))[idx]
Out[23]: 
array(['green_14', 'green_10', 'green_23', 'green_22', 'green_15',
       'green_13', 'green_20', 'green_9', 'green_8', 'green_17',
       'green_1', 'green_12', 'green_21', 'green_0', 'green_4', 'green_5',
       'green_18', 'green_6', 'green_3', 'green_2', 'green_16',
       'green_11', 'green_7', 'green_19'], dtype='<U8')
np.array([f'green_{i}' for i in range(24)]).reshape((6,4))[idx].shape((6,4))
Traceback (most recent call last):
  File "C:\Users\jllav\Anaconda3\envs\DAHFI\lib\site-packages\IPython\core\interactiveshell.py", line 3457, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "<ipython-input-24-7481124bb6d4>", line 1, in <module>
    np.array([f'green_{i}' for i in range(24)]).reshape((6,4))[idx].shape((6,4))
TypeError: 'tuple' object is not callable
(np.array([f'green_{i}' for i in range(24)]).reshape((6,4))[idx]).shape((6,4))
Traceback (most recent call last):
  File "C:\Users\jllav\Anaconda3\envs\DAHFI\lib\site-packages\IPython\core\interactiveshell.py", line 3457, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "<ipython-input-25-15124ee051f2>", line 1, in <module>
    (np.array([f'green_{i}' for i in range(24)]).reshape((6,4))[idx]).shape((6,4))
TypeError: 'tuple' object is not callable
np.array([f'green_{i}' for i in range(24)]).reshape((6,4))[idx]
Out[26]: 
array(['green_14', 'green_10', 'green_23', 'green_22', 'green_15',
       'green_13', 'green_20', 'green_9', 'green_8', 'green_17',
       'green_1', 'green_12', 'green_21', 'green_0', 'green_4', 'green_5',
       'green_18', 'green_6', 'green_3', 'green_2', 'green_16',
       'green_11', 'green_7', 'green_19'], dtype='<U8')
(np.array([f'green_{i}' for i in range(24)]).reshape((6,4))[idx]).reshape((6,4))
Out[27]: 
array([['green_14', 'green_10', 'green_23', 'green_22'],
       ['green_15', 'green_13', 'green_20', 'green_9'],
       ['green_8', 'green_17', 'green_1', 'green_12'],
       ['green_21', 'green_0', 'green_4', 'green_5'],
       ['green_18', 'green_6', 'green_3', 'green_2'],
       ['green_16', 'green_11', 'green_7', 'green_19']], dtype='<U8')
for value in sort_values:
    for col in FFT_data.coluns:
        if value in FFT_data[col]:
            print(FFT_data.index[FFT_data[col] == value], value)
Traceback (most recent call last):
  File "C:\Users\jllav\Anaconda3\envs\DAHFI\lib\site-packages\IPython\core\interactiveshell.py", line 3457, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "<ipython-input-28-974d787549ef>", line 1, in <module>
    for value in sort_values:
NameError: name 'sort_values' is not defined
sort_values = np.sort(data.loc[pd.IndexSlice[:, 'FFT'], :]['mean'].values.flatten())[::-1]
for value in sort_values:
    for col in FFT_data.coluns:
        if value in FFT_data[col]:
            print(FFT_data.index[FFT_data[col] == value], value)
Traceback (most recent call last):
  File "C:\Users\jllav\Anaconda3\envs\DAHFI\lib\site-packages\IPython\core\interactiveshell.py", line 3457, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "<ipython-input-30-974d787549ef>", line 2, in <module>
    for col in FFT_data.coluns:
NameError: name 'FFT_data' is not defined
FFT_data = data.loc[pd.IndexSlice[:, 'FFT'], :]['mean']
for value in sort_values:
    for col in FFT_data.coluns:
        if value in FFT_data[col]:
            print(FFT_data.index[FFT_data[col] == value], value)
Traceback (most recent call last):
  File "C:\Users\jllav\Anaconda3\envs\DAHFI\lib\site-packages\IPython\core\interactiveshell.py", line 3457, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "<ipython-input-32-974d787549ef>", line 2, in <module>
    for col in FFT_data.coluns:
  File "C:\Users\jllav\Anaconda3\envs\DAHFI\lib\site-packages\pandas\core\generic.py", line 5487, in __getattr__
    return object.__getattribute__(self, name)
AttributeError: 'DataFrame' object has no attribute 'coluns'
for value in sort_values:
    for col in FFT_data.columns:
        if value in FFT_data[col]:
            print(FFT_data.index[FFT_data[col] == value], value)
for value in sort_values:
    for col in FFT_data.columns:
        print(value)
        print(FFT_data[col])
        if value in FFT_data[col]:
            print(FFT_data.index[FFT_data[col] == value], value)
0.56398033126294
CLASSIFIER_NAME  DATASET
KNN              FFT        0.522472
KNNSScaler       FFT        0.519239
LR               FFT        0.534247
LRSScaler        FFT        0.527461
SVC              FFT        0.510047
SVCSScaler       FFT        0.538665
Name: PCA, dtype: float64
0.56398033126294
CLASSIFIER_NAME  DATASET
KNN              FFT        0.528385
KNNSScaler       FFT        0.518160
LR               FFT        0.537852
LRSScaler        FFT        0.539141
SVC              FFT        0.531542
SVCSScaler       FFT        0.524291
Name: PLS, dtype: float64
0.56398033126294
CLASSIFIER_NAME  DATASET
KNN              FFT        0.510851
KNNSScaler       FFT        0.515681
LR               FFT        0.563887
LRSScaler        FFT        0.563980
SVC              FFT        0.516752
SVCSScaler       FFT        0.554966
Name: mRMR, dtype: float64
0.56398033126294
CLASSIFIER_NAME  DATASET
KNN              FFT        0.513012
KNNSScaler       FFT        0.505929
LR               FFT        0.506012
LRSScaler        FFT        0.542679
SVC              FFT        0.500000
SVCSScaler       FFT        0.554982
Name: whole, dtype: float64
0.5638871635610766
CLASSIFIER_NAME  DATASET
KNN              FFT        0.522472
KNNSScaler       FFT        0.519239
LR               FFT        0.534247
LRSScaler        FFT        0.527461
SVC              FFT        0.510047
SVCSScaler       FFT        0.538665
Name: PCA, dtype: float64
0.5638871635610766
CLASSIFIER_NAME  DATASET
KNN              FFT        0.528385
KNNSScaler       FFT        0.518160
LR               FFT        0.537852
LRSScaler        FFT        0.539141
SVC              FFT        0.531542
SVCSScaler       FFT        0.524291
Name: PLS, dtype: float64
0.5638871635610766
CLASSIFIER_NAME  DATASET
KNN              FFT        0.510851
KNNSScaler       FFT        0.515681
LR               FFT        0.563887
LRSScaler        FFT        0.563980
SVC              FFT        0.516752
SVCSScaler       FFT        0.554966
Name: mRMR, dtype: float64
0.5638871635610766
CLASSIFIER_NAME  DATASET
KNN              FFT        0.513012
KNNSScaler       FFT        0.505929
LR               FFT        0.506012
LRSScaler        FFT        0.542679
SVC              FFT        0.500000
SVCSScaler       FFT        0.554982
Name: whole, dtype: float64
0.554981884057971
CLASSIFIER_NAME  DATASET
KNN              FFT        0.522472
KNNSScaler       FFT        0.519239
LR               FFT        0.534247
LRSScaler        FFT        0.527461
SVC              FFT        0.510047
SVCSScaler       FFT        0.538665
Name: PCA, dtype: float64
0.554981884057971
CLASSIFIER_NAME  DATASET
KNN              FFT        0.528385
KNNSScaler       FFT        0.518160
LR               FFT        0.537852
LRSScaler        FFT        0.539141
SVC              FFT        0.531542
SVCSScaler       FFT        0.524291
Name: PLS, dtype: float64
0.554981884057971
CLASSIFIER_NAME  DATASET
KNN              FFT        0.510851
KNNSScaler       FFT        0.515681
LR               FFT        0.563887
LRSScaler        FFT        0.563980
SVC              FFT        0.516752
SVCSScaler       FFT        0.554966
Name: mRMR, dtype: float64
0.554981884057971
CLASSIFIER_NAME  DATASET
KNN              FFT        0.513012
KNNSScaler       FFT        0.505929
LR               FFT        0.506012
LRSScaler        FFT        0.542679
SVC              FFT        0.500000
SVCSScaler       FFT        0.554982
Name: whole, dtype: float64
0.5549663561076605
CLASSIFIER_NAME  DATASET
KNN              FFT        0.522472
KNNSScaler       FFT        0.519239
LR               FFT        0.534247
LRSScaler        FFT        0.527461
SVC              FFT        0.510047
SVCSScaler       FFT        0.538665
Name: PCA, dtype: float64
0.5549663561076605
CLASSIFIER_NAME  DATASET
KNN              FFT        0.528385
KNNSScaler       FFT        0.518160
LR               FFT        0.537852
LRSScaler        FFT        0.539141
SVC              FFT        0.531542
SVCSScaler       FFT        0.524291
Name: PLS, dtype: float64
0.5549663561076605
CLASSIFIER_NAME  DATASET
KNN              FFT        0.510851
KNNSScaler       FFT        0.515681
LR               FFT        0.563887
LRSScaler        FFT        0.563980
SVC              FFT        0.516752
SVCSScaler       FFT        0.554966
Name: mRMR, dtype: float64
0.5549663561076605
CLASSIFIER_NAME  DATASET
KNN              FFT        0.513012
KNNSScaler       FFT        0.505929
LR               FFT        0.506012
LRSScaler        FFT        0.542679
SVC              FFT        0.500000
SVCSScaler       FFT        0.554982
Name: whole, dtype: float64
0.5426785714285715
CLASSIFIER_NAME  DATASET
KNN              FFT        0.522472
KNNSScaler       FFT        0.519239
LR               FFT        0.534247
LRSScaler        FFT        0.527461
SVC              FFT        0.510047
SVCSScaler       FFT        0.538665
Name: PCA, dtype: float64
0.5426785714285715
CLASSIFIER_NAME  DATASET
KNN              FFT        0.528385
KNNSScaler       FFT        0.518160
LR               FFT        0.537852
LRSScaler        FFT        0.539141
SVC              FFT        0.531542
SVCSScaler       FFT        0.524291
Name: PLS, dtype: float64
0.5426785714285715
CLASSIFIER_NAME  DATASET
KNN              FFT        0.510851
KNNSScaler       FFT        0.515681
LR               FFT        0.563887
LRSScaler        FFT        0.563980
SVC              FFT        0.516752
SVCSScaler       FFT        0.554966
Name: mRMR, dtype: float64
0.5426785714285715
CLASSIFIER_NAME  DATASET
KNN              FFT        0.513012
KNNSScaler       FFT        0.505929
LR               FFT        0.506012
LRSScaler        FFT        0.542679
SVC              FFT        0.500000
SVCSScaler       FFT        0.554982
Name: whole, dtype: float64
0.5391407867494824
CLASSIFIER_NAME  DATASET
KNN              FFT        0.522472
KNNSScaler       FFT        0.519239
LR               FFT        0.534247
LRSScaler        FFT        0.527461
SVC              FFT        0.510047
SVCSScaler       FFT        0.538665
Name: PCA, dtype: float64
0.5391407867494824
CLASSIFIER_NAME  DATASET
KNN              FFT        0.528385
KNNSScaler       FFT        0.518160
LR               FFT        0.537852
LRSScaler        FFT        0.539141
SVC              FFT        0.531542
SVCSScaler       FFT        0.524291
Name: PLS, dtype: float64
0.5391407867494824
CLASSIFIER_NAME  DATASET
KNN              FFT        0.510851
KNNSScaler       FFT        0.515681
LR               FFT        0.563887
LRSScaler        FFT        0.563980
SVC              FFT        0.516752
SVCSScaler       FFT        0.554966
Name: mRMR, dtype: float64
0.5391407867494824
CLASSIFIER_NAME  DATASET
KNN              FFT        0.513012
KNNSScaler       FFT        0.505929
LR               FFT        0.506012
LRSScaler        FFT        0.542679
SVC              FFT        0.500000
SVCSScaler       FFT        0.554982
Name: whole, dtype: float64
0.5386645962732919
CLASSIFIER_NAME  DATASET
KNN              FFT        0.522472
KNNSScaler       FFT        0.519239
LR               FFT        0.534247
LRSScaler        FFT        0.527461
SVC              FFT        0.510047
SVCSScaler       FFT        0.538665
Name: PCA, dtype: float64
0.5386645962732919
CLASSIFIER_NAME  DATASET
KNN              FFT        0.528385
KNNSScaler       FFT        0.518160
LR               FFT        0.537852
LRSScaler        FFT        0.539141
SVC              FFT        0.531542
SVCSScaler       FFT        0.524291
Name: PLS, dtype: float64
0.5386645962732919
CLASSIFIER_NAME  DATASET
KNN              FFT        0.510851
KNNSScaler       FFT        0.515681
LR               FFT        0.563887
LRSScaler        FFT        0.563980
SVC              FFT        0.516752
SVCSScaler       FFT        0.554966
Name: mRMR, dtype: float64
0.5386645962732919
CLASSIFIER_NAME  DATASET
KNN              FFT        0.513012
KNNSScaler       FFT        0.505929
LR               FFT        0.506012
LRSScaler        FFT        0.542679
SVC              FFT        0.500000
SVCSScaler       FFT        0.554982
Name: whole, dtype: float64
0.537851966873706
CLASSIFIER_NAME  DATASET
KNN              FFT        0.522472
KNNSScaler       FFT        0.519239
LR               FFT        0.534247
LRSScaler        FFT        0.527461
SVC              FFT        0.510047
SVCSScaler       FFT        0.538665
Name: PCA, dtype: float64
0.537851966873706
CLASSIFIER_NAME  DATASET
KNN              FFT        0.528385
KNNSScaler       FFT        0.518160
LR               FFT        0.537852
LRSScaler        FFT        0.539141
SVC              FFT        0.531542
SVCSScaler       FFT        0.524291
Name: PLS, dtype: float64
0.537851966873706
CLASSIFIER_NAME  DATASET
KNN              FFT        0.510851
KNNSScaler       FFT        0.515681
LR               FFT        0.563887
LRSScaler        FFT        0.563980
SVC              FFT        0.516752
SVCSScaler       FFT        0.554966
Name: mRMR, dtype: float64
0.537851966873706
CLASSIFIER_NAME  DATASET
KNN              FFT        0.513012
KNNSScaler       FFT        0.505929
LR               FFT        0.506012
LRSScaler        FFT        0.542679
SVC              FFT        0.500000
SVCSScaler       FFT        0.554982
Name: whole, dtype: float64
0.5342468944099379
CLASSIFIER_NAME  DATASET
KNN              FFT        0.522472
KNNSScaler       FFT        0.519239
LR               FFT        0.534247
LRSScaler        FFT        0.527461
SVC              FFT        0.510047
SVCSScaler       FFT        0.538665
Name: PCA, dtype: float64
0.5342468944099379
CLASSIFIER_NAME  DATASET
KNN              FFT        0.528385
KNNSScaler       FFT        0.518160
LR               FFT        0.537852
LRSScaler        FFT        0.539141
SVC              FFT        0.531542
SVCSScaler       FFT        0.524291
Name: PLS, dtype: float64
0.5342468944099379
CLASSIFIER_NAME  DATASET
KNN              FFT        0.510851
KNNSScaler       FFT        0.515681
LR               FFT        0.563887
LRSScaler        FFT        0.563980
SVC              FFT        0.516752
SVCSScaler       FFT        0.554966
Name: mRMR, dtype: float64
0.5342468944099379
CLASSIFIER_NAME  DATASET
KNN              FFT        0.513012
KNNSScaler       FFT        0.505929
LR               FFT        0.506012
LRSScaler        FFT        0.542679
SVC              FFT        0.500000
SVCSScaler       FFT        0.554982
Name: whole, dtype: float64
0.5315424430641822
CLASSIFIER_NAME  DATASET
KNN              FFT        0.522472
KNNSScaler       FFT        0.519239
LR               FFT        0.534247
LRSScaler        FFT        0.527461
SVC              FFT        0.510047
SVCSScaler       FFT        0.538665
Name: PCA, dtype: float64
0.5315424430641822
CLASSIFIER_NAME  DATASET
KNN              FFT        0.528385
KNNSScaler       FFT        0.518160
LR               FFT        0.537852
LRSScaler        FFT        0.539141
SVC              FFT        0.531542
SVCSScaler       FFT        0.524291
Name: PLS, dtype: float64
0.5315424430641822
CLASSIFIER_NAME  DATASET
KNN              FFT        0.510851
KNNSScaler       FFT        0.515681
LR               FFT        0.563887
LRSScaler        FFT        0.563980
SVC              FFT        0.516752
SVCSScaler       FFT        0.554966
Name: mRMR, dtype: float64
0.5315424430641822
CLASSIFIER_NAME  DATASET
KNN              FFT        0.513012
KNNSScaler       FFT        0.505929
LR               FFT        0.506012
LRSScaler        FFT        0.542679
SVC              FFT        0.500000
SVCSScaler       FFT        0.554982
Name: whole, dtype: float64
0.5283850931677019
CLASSIFIER_NAME  DATASET
KNN              FFT        0.522472
KNNSScaler       FFT        0.519239
LR               FFT        0.534247
LRSScaler        FFT        0.527461
SVC              FFT        0.510047
SVCSScaler       FFT        0.538665
Name: PCA, dtype: float64
0.5283850931677019
CLASSIFIER_NAME  DATASET
KNN              FFT        0.528385
KNNSScaler       FFT        0.518160
LR               FFT        0.537852
LRSScaler        FFT        0.539141
SVC              FFT        0.531542
SVCSScaler       FFT        0.524291
Name: PLS, dtype: float64
0.5283850931677019
CLASSIFIER_NAME  DATASET
KNN              FFT        0.510851
KNNSScaler       FFT        0.515681
LR               FFT        0.563887
LRSScaler        FFT        0.563980
SVC              FFT        0.516752
SVCSScaler       FFT        0.554966
Name: mRMR, dtype: float64
0.5283850931677019
CLASSIFIER_NAME  DATASET
KNN              FFT        0.513012
KNNSScaler       FFT        0.505929
LR               FFT        0.506012
LRSScaler        FFT        0.542679
SVC              FFT        0.500000
SVCSScaler       FFT        0.554982
Name: whole, dtype: float64
0.5274611801242236
CLASSIFIER_NAME  DATASET
KNN              FFT        0.522472
KNNSScaler       FFT        0.519239
LR               FFT        0.534247
LRSScaler        FFT        0.527461
SVC              FFT        0.510047
SVCSScaler       FFT        0.538665
Name: PCA, dtype: float64
0.5274611801242236
CLASSIFIER_NAME  DATASET
KNN              FFT        0.528385
KNNSScaler       FFT        0.518160
LR               FFT        0.537852
LRSScaler        FFT        0.539141
SVC              FFT        0.531542
SVCSScaler       FFT        0.524291
Name: PLS, dtype: float64
0.5274611801242236
CLASSIFIER_NAME  DATASET
KNN              FFT        0.510851
KNNSScaler       FFT        0.515681
LR               FFT        0.563887
LRSScaler        FFT        0.563980
SVC              FFT        0.516752
SVCSScaler       FFT        0.554966
Name: mRMR, dtype: float64
0.5274611801242236
CLASSIFIER_NAME  DATASET
KNN              FFT        0.513012
KNNSScaler       FFT        0.505929
LR               FFT        0.506012
LRSScaler        FFT        0.542679
SVC              FFT        0.500000
SVCSScaler       FFT        0.554982
Name: whole, dtype: float64
0.5242908902691511
CLASSIFIER_NAME  DATASET
KNN              FFT        0.522472
KNNSScaler       FFT        0.519239
LR               FFT        0.534247
LRSScaler        FFT        0.527461
SVC              FFT        0.510047
SVCSScaler       FFT        0.538665
Name: PCA, dtype: float64
0.5242908902691511
CLASSIFIER_NAME  DATASET
KNN              FFT        0.528385
KNNSScaler       FFT        0.518160
LR               FFT        0.537852
LRSScaler        FFT        0.539141
SVC              FFT        0.531542
SVCSScaler       FFT        0.524291
Name: PLS, dtype: float64
0.5242908902691511
CLASSIFIER_NAME  DATASET
KNN              FFT        0.510851
KNNSScaler       FFT        0.515681
LR               FFT        0.563887
LRSScaler        FFT        0.563980
SVC              FFT        0.516752
SVCSScaler       FFT        0.554966
Name: mRMR, dtype: float64
0.5242908902691511
CLASSIFIER_NAME  DATASET
KNN              FFT        0.513012
KNNSScaler       FFT        0.505929
LR               FFT        0.506012
LRSScaler        FFT        0.542679
SVC              FFT        0.500000
SVCSScaler       FFT        0.554982
Name: whole, dtype: float64
0.5224715320910973
CLASSIFIER_NAME  DATASET
KNN              FFT        0.522472
KNNSScaler       FFT        0.519239
LR               FFT        0.534247
LRSScaler        FFT        0.527461
SVC              FFT        0.510047
SVCSScaler       FFT        0.538665
Name: PCA, dtype: float64
0.5224715320910973
CLASSIFIER_NAME  DATASET
KNN              FFT        0.528385
KNNSScaler       FFT        0.518160
LR               FFT        0.537852
LRSScaler        FFT        0.539141
SVC              FFT        0.531542
SVCSScaler       FFT        0.524291
Name: PLS, dtype: float64
0.5224715320910973
CLASSIFIER_NAME  DATASET
KNN              FFT        0.510851
KNNSScaler       FFT        0.515681
LR               FFT        0.563887
LRSScaler        FFT        0.563980
SVC              FFT        0.516752
SVCSScaler       FFT        0.554966
Name: mRMR, dtype: float64
0.5224715320910973
CLASSIFIER_NAME  DATASET
KNN              FFT        0.513012
KNNSScaler       FFT        0.505929
LR               FFT        0.506012
LRSScaler        FFT        0.542679
SVC              FFT        0.500000
SVCSScaler       FFT        0.554982
Name: whole, dtype: float64
0.5192391304347825
CLASSIFIER_NAME  DATASET
KNN              FFT        0.522472
KNNSScaler       FFT        0.519239
LR               FFT        0.534247
LRSScaler        FFT        0.527461
SVC              FFT        0.510047
SVCSScaler       FFT        0.538665
Name: PCA, dtype: float64
0.5192391304347825
CLASSIFIER_NAME  DATASET
KNN              FFT        0.528385
KNNSScaler       FFT        0.518160
LR               FFT        0.537852
LRSScaler        FFT        0.539141
SVC              FFT        0.531542
SVCSScaler       FFT        0.524291
Name: PLS, dtype: float64
0.5192391304347825
CLASSIFIER_NAME  DATASET
KNN              FFT        0.510851
KNNSScaler       FFT        0.515681
LR               FFT        0.563887
LRSScaler        FFT        0.563980
SVC              FFT        0.516752
SVCSScaler       FFT        0.554966
Name: mRMR, dtype: float64
0.5192391304347825
CLASSIFIER_NAME  DATASET
KNN              FFT        0.513012
KNNSScaler       FFT        0.505929
LR               FFT        0.506012
LRSScaler        FFT        0.542679
SVC              FFT        0.500000
SVCSScaler       FFT        0.554982
Name: whole, dtype: float64
0.5181599378881987
CLASSIFIER_NAME  DATASET
KNN              FFT        0.522472
KNNSScaler       FFT        0.519239
LR               FFT        0.534247
LRSScaler        FFT        0.527461
SVC              FFT        0.510047
SVCSScaler       FFT        0.538665
Name: PCA, dtype: float64
0.5181599378881987
CLASSIFIER_NAME  DATASET
KNN              FFT        0.528385
KNNSScaler       FFT        0.518160
LR               FFT        0.537852
LRSScaler        FFT        0.539141
SVC              FFT        0.531542
SVCSScaler       FFT        0.524291
Name: PLS, dtype: float64
0.5181599378881987
CLASSIFIER_NAME  DATASET
KNN              FFT        0.510851
KNNSScaler       FFT        0.515681
LR               FFT        0.563887
LRSScaler        FFT        0.563980
SVC              FFT        0.516752
SVCSScaler       FFT        0.554966
Name: mRMR, dtype: float64
0.5181599378881987
CLASSIFIER_NAME  DATASET
KNN              FFT        0.513012
KNNSScaler       FFT        0.505929
LR               FFT        0.506012
LRSScaler        FFT        0.542679
SVC              FFT        0.500000
SVCSScaler       FFT        0.554982
Name: whole, dtype: float64
0.5167520703933747
CLASSIFIER_NAME  DATASET
KNN              FFT        0.522472
KNNSScaler       FFT        0.519239
LR               FFT        0.534247
LRSScaler        FFT        0.527461
SVC              FFT        0.510047
SVCSScaler       FFT        0.538665
Name: PCA, dtype: float64
0.5167520703933747
CLASSIFIER_NAME  DATASET
KNN              FFT        0.528385
KNNSScaler       FFT        0.518160
LR               FFT        0.537852
LRSScaler        FFT        0.539141
SVC              FFT        0.531542
SVCSScaler       FFT        0.524291
Name: PLS, dtype: float64
0.5167520703933747
CLASSIFIER_NAME  DATASET
KNN              FFT        0.510851
KNNSScaler       FFT        0.515681
LR               FFT        0.563887
LRSScaler        FFT        0.563980
SVC              FFT        0.516752
SVCSScaler       FFT        0.554966
Name: mRMR, dtype: float64
0.5167520703933747
CLASSIFIER_NAME  DATASET
KNN              FFT        0.513012
KNNSScaler       FFT        0.505929
LR               FFT        0.506012
LRSScaler        FFT        0.542679
SVC              FFT        0.500000
SVCSScaler       FFT        0.554982
Name: whole, dtype: float64
0.5156806418219462
CLASSIFIER_NAME  DATASET
KNN              FFT        0.522472
KNNSScaler       FFT        0.519239
LR               FFT        0.534247
LRSScaler        FFT        0.527461
SVC              FFT        0.510047
SVCSScaler       FFT        0.538665
Name: PCA, dtype: float64
0.5156806418219462
CLASSIFIER_NAME  DATASET
KNN              FFT        0.528385
KNNSScaler       FFT        0.518160
LR               FFT        0.537852
LRSScaler        FFT        0.539141
SVC              FFT        0.531542
SVCSScaler       FFT        0.524291
Name: PLS, dtype: float64
0.5156806418219462
CLASSIFIER_NAME  DATASET
KNN              FFT        0.510851
KNNSScaler       FFT        0.515681
LR               FFT        0.563887
LRSScaler        FFT        0.563980
SVC              FFT        0.516752
SVCSScaler       FFT        0.554966
Name: mRMR, dtype: float64
0.5156806418219462
CLASSIFIER_NAME  DATASET
KNN              FFT        0.513012
KNNSScaler       FFT        0.505929
LR               FFT        0.506012
LRSScaler        FFT        0.542679
SVC              FFT        0.500000
SVCSScaler       FFT        0.554982
Name: whole, dtype: float64
0.5130124223602484
CLASSIFIER_NAME  DATASET
KNN              FFT        0.522472
KNNSScaler       FFT        0.519239
LR               FFT        0.534247
LRSScaler        FFT        0.527461
SVC              FFT        0.510047
SVCSScaler       FFT        0.538665
Name: PCA, dtype: float64
0.5130124223602484
CLASSIFIER_NAME  DATASET
KNN              FFT        0.528385
KNNSScaler       FFT        0.518160
LR               FFT        0.537852
LRSScaler        FFT        0.539141
SVC              FFT        0.531542
SVCSScaler       FFT        0.524291
Name: PLS, dtype: float64
0.5130124223602484
CLASSIFIER_NAME  DATASET
KNN              FFT        0.510851
KNNSScaler       FFT        0.515681
LR               FFT        0.563887
LRSScaler        FFT        0.563980
SVC              FFT        0.516752
SVCSScaler       FFT        0.554966
Name: mRMR, dtype: float64
0.5130124223602484
CLASSIFIER_NAME  DATASET
KNN              FFT        0.513012
KNNSScaler       FFT        0.505929
LR               FFT        0.506012
LRSScaler        FFT        0.542679
SVC              FFT        0.500000
SVCSScaler       FFT        0.554982
Name: whole, dtype: float64
0.5108514492753623
CLASSIFIER_NAME  DATASET
KNN              FFT        0.522472
KNNSScaler       FFT        0.519239
LR               FFT        0.534247
LRSScaler        FFT        0.527461
SVC              FFT        0.510047
SVCSScaler       FFT        0.538665
Name: PCA, dtype: float64
0.5108514492753623
CLASSIFIER_NAME  DATASET
KNN              FFT        0.528385
KNNSScaler       FFT        0.518160
LR               FFT        0.537852
LRSScaler        FFT        0.539141
SVC              FFT        0.531542
SVCSScaler       FFT        0.524291
Name: PLS, dtype: float64
0.5108514492753623
CLASSIFIER_NAME  DATASET
KNN              FFT        0.510851
KNNSScaler       FFT        0.515681
LR               FFT        0.563887
LRSScaler        FFT        0.563980
SVC              FFT        0.516752
SVCSScaler       FFT        0.554966
Name: mRMR, dtype: float64
0.5108514492753623
CLASSIFIER_NAME  DATASET
KNN              FFT        0.513012
KNNSScaler       FFT        0.505929
LR               FFT        0.506012
LRSScaler        FFT        0.542679
SVC              FFT        0.500000
SVCSScaler       FFT        0.554982
Name: whole, dtype: float64
0.5100465838509316
CLASSIFIER_NAME  DATASET
KNN              FFT        0.522472
KNNSScaler       FFT        0.519239
LR               FFT        0.534247
LRSScaler        FFT        0.527461
SVC              FFT        0.510047
SVCSScaler       FFT        0.538665
Name: PCA, dtype: float64
0.5100465838509316
CLASSIFIER_NAME  DATASET
KNN              FFT        0.528385
KNNSScaler       FFT        0.518160
LR               FFT        0.537852
LRSScaler        FFT        0.539141
SVC              FFT        0.531542
SVCSScaler       FFT        0.524291
Name: PLS, dtype: float64
0.5100465838509316
CLASSIFIER_NAME  DATASET
KNN              FFT        0.510851
KNNSScaler       FFT        0.515681
LR               FFT        0.563887
LRSScaler        FFT        0.563980
SVC              FFT        0.516752
SVCSScaler       FFT        0.554966
Name: mRMR, dtype: float64
0.5100465838509316
CLASSIFIER_NAME  DATASET
KNN              FFT        0.513012
KNNSScaler       FFT        0.505929
LR               FFT        0.506012
LRSScaler        FFT        0.542679
SVC              FFT        0.500000
SVCSScaler       FFT        0.554982
Name: whole, dtype: float64
0.5060119047619047
CLASSIFIER_NAME  DATASET
KNN              FFT        0.522472
KNNSScaler       FFT        0.519239
LR               FFT        0.534247
LRSScaler        FFT        0.527461
SVC              FFT        0.510047
SVCSScaler       FFT        0.538665
Name: PCA, dtype: float64
0.5060119047619047
CLASSIFIER_NAME  DATASET
KNN              FFT        0.528385
KNNSScaler       FFT        0.518160
LR               FFT        0.537852
LRSScaler        FFT        0.539141
SVC              FFT        0.531542
SVCSScaler       FFT        0.524291
Name: PLS, dtype: float64
0.5060119047619047
CLASSIFIER_NAME  DATASET
KNN              FFT        0.510851
KNNSScaler       FFT        0.515681
LR               FFT        0.563887
LRSScaler        FFT        0.563980
SVC              FFT        0.516752
SVCSScaler       FFT        0.554966
Name: mRMR, dtype: float64
0.5060119047619047
CLASSIFIER_NAME  DATASET
KNN              FFT        0.513012
KNNSScaler       FFT        0.505929
LR               FFT        0.506012
LRSScaler        FFT        0.542679
SVC              FFT        0.500000
SVCSScaler       FFT        0.554982
Name: whole, dtype: float64
0.5059290890269151
CLASSIFIER_NAME  DATASET
KNN              FFT        0.522472
KNNSScaler       FFT        0.519239
LR               FFT        0.534247
LRSScaler        FFT        0.527461
SVC              FFT        0.510047
SVCSScaler       FFT        0.538665
Name: PCA, dtype: float64
0.5059290890269151
CLASSIFIER_NAME  DATASET
KNN              FFT        0.528385
KNNSScaler       FFT        0.518160
LR               FFT        0.537852
LRSScaler        FFT        0.539141
SVC              FFT        0.531542
SVCSScaler       FFT        0.524291
Name: PLS, dtype: float64
0.5059290890269151
CLASSIFIER_NAME  DATASET
KNN              FFT        0.510851
KNNSScaler       FFT        0.515681
LR               FFT        0.563887
LRSScaler        FFT        0.563980
SVC              FFT        0.516752
SVCSScaler       FFT        0.554966
Name: mRMR, dtype: float64
0.5059290890269151
CLASSIFIER_NAME  DATASET
KNN              FFT        0.513012
KNNSScaler       FFT        0.505929
LR               FFT        0.506012
LRSScaler        FFT        0.542679
SVC              FFT        0.500000
SVCSScaler       FFT        0.554982
Name: whole, dtype: float64
0.5
CLASSIFIER_NAME  DATASET
KNN              FFT        0.522472
KNNSScaler       FFT        0.519239
LR               FFT        0.534247
LRSScaler        FFT        0.527461
SVC              FFT        0.510047
SVCSScaler       FFT        0.538665
Name: PCA, dtype: float64
0.5
CLASSIFIER_NAME  DATASET
KNN              FFT        0.528385
KNNSScaler       FFT        0.518160
LR               FFT        0.537852
LRSScaler        FFT        0.539141
SVC              FFT        0.531542
SVCSScaler       FFT        0.524291
Name: PLS, dtype: float64
0.5
CLASSIFIER_NAME  DATASET
KNN              FFT        0.510851
KNNSScaler       FFT        0.515681
LR               FFT        0.563887
LRSScaler        FFT        0.563980
SVC              FFT        0.516752
SVCSScaler       FFT        0.554966
Name: mRMR, dtype: float64
0.5
CLASSIFIER_NAME  DATASET
KNN              FFT        0.513012
KNNSScaler       FFT        0.505929
LR               FFT        0.506012
LRSScaler        FFT        0.542679
SVC              FFT        0.500000
SVCSScaler       FFT        0.554982
Name: whole, dtype: float64
FFT_data['whole']
Out[35]: 
CLASSIFIER_NAME  DATASET
KNN              FFT        0.513012
KNNSScaler       FFT        0.505929
LR               FFT        0.506012
LRSScaler        FFT        0.542679
SVC              FFT        0.500000
SVCSScaler       FFT        0.554982
Name: whole, dtype: float64
sort_values[-1]
Out[36]: 0.5
sort_values[-1] in FFT_data['whole']
Out[37]: False
sort_values[-1] in FFT_data['whole'].values
Out[38]: True
for value in sort_values:
    for col in FFT_data.columns:
        if value in FFT_data[col].values:
            print(FFT_data.index[FFT_data[col] == value], value)
MultiIndex([('LRSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) 0.56398033126294
MultiIndex([('LR', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) 0.5638871635610766
MultiIndex([('SVCSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) 0.554981884057971
MultiIndex([('SVCSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) 0.5549663561076605
MultiIndex([('LRSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) 0.5426785714285715
MultiIndex([('LRSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) 0.5391407867494824
MultiIndex([('SVCSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) 0.5386645962732919
MultiIndex([('LR', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) 0.537851966873706
MultiIndex([('LR', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) 0.5342468944099379
MultiIndex([('SVC', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) 0.5315424430641822
MultiIndex([('KNN', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) 0.5283850931677019
MultiIndex([('LRSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) 0.5274611801242236
MultiIndex([('SVCSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) 0.5242908902691511
MultiIndex([('KNN', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) 0.5224715320910973
MultiIndex([('KNNSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) 0.5192391304347825
MultiIndex([('KNNSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) 0.5181599378881987
MultiIndex([('SVC', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) 0.5167520703933747
MultiIndex([('KNNSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) 0.5156806418219462
MultiIndex([('KNN', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) 0.5130124223602484
MultiIndex([('KNN', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) 0.5108514492753623
MultiIndex([('SVC', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) 0.5100465838509316
MultiIndex([('LR', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) 0.5060119047619047
MultiIndex([('KNNSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) 0.5059290890269151
MultiIndex([('SVC', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) 0.5
for value in sort_values:
    for col in FFT_data.columns:
        if value in FFT_data[col].values:
            print(FFT_data.index[FFT_data[col] == value].value)
Traceback (most recent call last):
  File "C:\Users\jllav\Anaconda3\envs\DAHFI\lib\site-packages\IPython\core\interactiveshell.py", line 3457, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "<ipython-input-40-fc5d34e289b1>", line 4, in <module>
    print(FFT_data.index[FFT_data[col] == value].value)
AttributeError: 'MultiIndex' object has no attribute 'value'
for value in sort_values:
    for col in FFT_data.columns:
        if value in FFT_data[col].values:
            print(FFT_data.index[FFT_data[col] == value])
MultiIndex([('LRSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LR', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVCSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVCSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LRSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LRSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVCSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LR', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LR', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVC', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNN', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LRSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVCSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNN', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNNSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNNSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVC', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNNSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNN', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNN', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVC', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LR', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNNSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVC', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
for value in sort_values:
    for col in FFT_data.columns:
        if value in FFT_data[col].values:
            print(FFT_data.index[FFT_data[col] == value], col)
MultiIndex([('LRSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) mRMR
MultiIndex([('LR', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) mRMR
MultiIndex([('SVCSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) whole
MultiIndex([('SVCSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) mRMR
MultiIndex([('LRSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) whole
MultiIndex([('LRSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) PLS
MultiIndex([('SVCSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) PCA
MultiIndex([('LR', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) PLS
MultiIndex([('LR', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) PCA
MultiIndex([('SVC', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) PLS
MultiIndex([('KNN', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) PLS
MultiIndex([('LRSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) PCA
MultiIndex([('SVCSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) PLS
MultiIndex([('KNN', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) PCA
MultiIndex([('KNNSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) PCA
MultiIndex([('KNNSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) PLS
MultiIndex([('SVC', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) mRMR
MultiIndex([('KNNSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) mRMR
MultiIndex([('KNN', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) whole
MultiIndex([('KNN', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) mRMR
MultiIndex([('SVC', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) PCA
MultiIndex([('LR', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) whole
MultiIndex([('KNNSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) whole
MultiIndex([('SVC', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET']) whole
FFT_data.index.values
Out[43]: 
array([('KNN', 'FFT'), ('KNNSScaler', 'FFT'), ('LR', 'FFT'),
       ('LRSScaler', 'FFT'), ('SVC', 'FFT'), ('SVCSScaler', 'FFT')],
      dtype=object)
FFT_data.index.values.tolist().index(('KNNSScaler', 'FFT'))
Out[44]: 1
index_list = FFT_data.index.values.tolist()
columns_list = FFT_data.columns.values.tolist()
row_order, columns_order = [], []
for value in sort_values:
    for col in FFT_data.columns:
        if value in FFT_data[col].values:
            row_order.append(index_list.index(FFT_data.index[FFT_data[col] == value]))
            print(FFT_data.index[FFT_data[col] == value])
MultiIndex([('LRSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LR', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVCSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVCSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LRSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LRSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVCSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LR', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LR', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVC', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNN', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LRSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVCSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNN', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNNSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNNSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVC', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNNSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNN', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNN', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVC', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LR', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNNSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVC', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
row_order
Out[49]: [3, 2, 5, 5, 3, 3, 5, 2, 2, 4, 0, 3, 5, 0, 1, 1, 4, 1, 0, 0, 4, 2, 1, 4]
for value in sort_values:
    for col in FFT_data.columns:
        if value in FFT_data[col].values:
            row_order.append(index_list.index(FFT_data.index[FFT_data[col] == value]))
            col_order.append(columns_list.index(col))
            print(FFT_data.index[FFT_data[col] == value])
Traceback (most recent call last):
  File "C:\Users\jllav\Anaconda3\envs\DAHFI\lib\site-packages\IPython\core\interactiveshell.py", line 3457, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "<ipython-input-50-d33df32e621b>", line 5, in <module>
    col_order.append(columns_list.index(col))
NameError: name 'col_order' is not defined
for value in sort_values:
    for col in FFT_data.columns:
        if value in FFT_data[col].values:
            row_order.append(index_list.index(FFT_data.index[FFT_data[col] == value]))
            columns_order.append(columns_list.index(col))
            print(FFT_data.index[FFT_data[col] == value])
MultiIndex([('LRSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LR', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVCSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVCSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LRSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LRSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVCSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LR', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LR', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVC', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNN', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LRSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVCSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNN', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNNSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNNSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVC', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNNSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNN', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNN', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVC', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LR', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNNSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVC', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
row_order, columns_order
Out[52]: 
([3,
  2,
  5,
  5,
  3,
  3,
  5,
  2,
  2,
  4,
  0,
  3,
  5,
  0,
  1,
  1,
  4,
  1,
  0,
  0,
  4,
  2,
  1,
  4,
  3,
  3,
  2,
  5,
  5,
  3,
  3,
  5,
  2,
  2,
  4,
  0,
  3,
  5,
  0,
  1,
  1,
  4,
  1,
  0,
  0,
  4,
  2,
  1,
  4],
 [2, 2, 3, 2, 3, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 2, 2, 3, 2, 0, 3, 3, 3])
order = (np.array(row_order), np.array(columns_order))
np.array([f'green_{i}' for i in range(24)]).reshape(FFT_data.shape)[order]
Traceback (most recent call last):
  File "C:\Users\jllav\Anaconda3\envs\DAHFI\lib\site-packages\IPython\core\interactiveshell.py", line 3457, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "<ipython-input-54-726ff02f8c2f>", line 1, in <module>
    np.array([f'green_{i}' for i in range(24)]).reshape(FFT_data.shape)[order]
IndexError: shape mismatch: indexing arrays could not be broadcast together with shapes (49,) (24,) 
np.array([f'green_{i}' for i in range(24)]).reshape((6,4))[order]
Traceback (most recent call last):
  File "C:\Users\jllav\Anaconda3\envs\DAHFI\lib\site-packages\IPython\core\interactiveshell.py", line 3457, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "<ipython-input-55-cffcdffafa2d>", line 1, in <module>
    np.array([f'green_{i}' for i in range(24)]).reshape((6,4))[order]
IndexError: shape mismatch: indexing arrays could not be broadcast together with shapes (49,) (24,) 
np.array([f'green_{i}' for i in range(24)]).shape
Out[56]: (24,)
np.array([f'green_{i}' for i in range(24)]).reshape((6,4))
Out[57]: 
array([['green_0', 'green_1', 'green_2', 'green_3'],
       ['green_4', 'green_5', 'green_6', 'green_7'],
       ['green_8', 'green_9', 'green_10', 'green_11'],
       ['green_12', 'green_13', 'green_14', 'green_15'],
       ['green_16', 'green_17', 'green_18', 'green_19'],
       ['green_20', 'green_21', 'green_22', 'green_23']], dtype='<U8')
np.array([f'green_{i}' for i in range(24)]).reshape((6,4))[order]
Traceback (most recent call last):
  File "C:\Users\jllav\Anaconda3\envs\DAHFI\lib\site-packages\IPython\core\interactiveshell.py", line 3457, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "<ipython-input-58-cffcdffafa2d>", line 1, in <module>
    np.array([f'green_{i}' for i in range(24)]).reshape((6,4))[order]
IndexError: shape mismatch: indexing arrays could not be broadcast together with shapes (49,) (24,) 
order
Out[59]: 
(array([3, 2, 5, 5, 3, 3, 5, 2, 2, 4, 0, 3, 5, 0, 1, 1, 4, 1, 0, 0, 4, 2,
        1, 4, 3, 3, 2, 5, 5, 3, 3, 5, 2, 2, 4, 0, 3, 5, 0, 1, 1, 4, 1, 0,
        0, 4, 2, 1, 4]),
 array([2, 2, 3, 2, 3, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 2, 2, 3, 2, 0, 3,
        3, 3]))
row_order, col_order = [], []
for value in sort_values:
    for col in FFT_data.columns:
        if value in FFT_data[col].values:
            row_order.append(index_list.index(FFT_data.index[FFT_data[col] == value]))
            col_order.append(columns_list.index(col))
            print(FFT_data.index[FFT_data[col] == value])
MultiIndex([('LRSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LR', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVCSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVCSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LRSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LRSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVCSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LR', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LR', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVC', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNN', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LRSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVCSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNN', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNNSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNNSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVC', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNNSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNN', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNN', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVC', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('LR', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('KNNSScaler', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
MultiIndex([('SVC', 'FFT')],
           names=['CLASSIFIER_NAME', 'DATASET'])
row_order, col_order = [], []
for value in sort_values:
    for col in FFT_data.columns:
        if value in FFT_data[col].values:
            row_order.append(index_list.index(FFT_data.index[FFT_data[col] == value]))
            col_order.append(columns_list.index(col))
order = (np.array(row_order), np.array(col_order))
order
Out[63]: 
(array([3, 2, 5, 5, 3, 3, 5, 2, 2, 4, 0, 3, 5, 0, 1, 1, 4, 1, 0, 0, 4, 2,
        1, 4]),
 array([2, 2, 3, 2, 3, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 2, 2, 3, 2, 0, 3,
        3, 3]))
np.array([f'green_{i}' for i in range(24)]).reshape((6,4))[order]
Out[64]: 
array(['green_14', 'green_10', 'green_23', 'green_22', 'green_15',
       'green_13', 'green_20', 'green_9', 'green_8', 'green_17',
       'green_1', 'green_12', 'green_21', 'green_0', 'green_4', 'green_5',
       'green_18', 'green_6', 'green_3', 'green_2', 'green_16',
       'green_11', 'green_7', 'green_19'], dtype='<U8')
np.array([f'green_{i}' for i in range(24)])
Out[65]: 
array(['green_0', 'green_1', 'green_2', 'green_3', 'green_4', 'green_5',
       'green_6', 'green_7', 'green_8', 'green_9', 'green_10', 'green_11',
       'green_12', 'green_13', 'green_14', 'green_15', 'green_16',
       'green_17', 'green_18', 'green_19', 'green_20', 'green_21',
       'green_22', 'green_23'], dtype='<U8')
np.array([f'green_{i}' for i in range(24)]).reshape((6,4))[order].reshape((6,4))
Out[66]: 
array([['green_14', 'green_10', 'green_23', 'green_22'],
       ['green_15', 'green_13', 'green_20', 'green_9'],
       ['green_8', 'green_17', 'green_1', 'green_12'],
       ['green_21', 'green_0', 'green_4', 'green_5'],
       ['green_18', 'green_6', 'green_3', 'green_2'],
       ['green_16', 'green_11', 'green_7', 'green_19']], dtype='<U8')
col_order = np.array(dtype='<U8', shape=(6,4))
Traceback (most recent call last):
  File "C:\Users\jllav\Anaconda3\envs\DAHFI\lib\site-packages\IPython\core\interactiveshell.py", line 3457, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "<ipython-input-67-595bbd03220c>", line 1, in <module>
    col_order = np.array(dtype='<U8', shape=(6,4))
TypeError: array() got an unexpected keyword argument 'shape'
col_order = np.array(dtype='<U8', size=(6,4))
Traceback (most recent call last):
  File "C:\Users\jllav\Anaconda3\envs\DAHFI\lib\site-packages\IPython\core\interactiveshell.py", line 3457, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "<ipython-input-68-c072187d9ba0>", line 1, in <module>
    col_order = np.array(dtype='<U8', size=(6,4))
TypeError: array() got an unexpected keyword argument 'size'
col_order = np.empty(dtype='<U8', size=(6,4))
Traceback (most recent call last):
  File "C:\Users\jllav\Anaconda3\envs\DAHFI\lib\site-packages\IPython\core\interactiveshell.py", line 3457, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "<ipython-input-69-da7fc48fe6b5>", line 1, in <module>
    col_order = np.empty(dtype='<U8', size=(6,4))
TypeError: empty() got an unexpected keyword argument 'size'
col_order = np.empty(dtype='<U8', shape=(6,4))
colors_order = np.empty(dtype='<U8', shape=(6,4))
row_order, col_order = [], []
for value in sort_values:
    for col in FFT_data.columns:
        if value in FFT_data[col].values:
            row_order.append(index_list.index(FFT_data.index[FFT_data[col] == value]))
            col_order.append(columns_list.index(col))
colors = np.array([f'green_{i}' for i in range(24)]).reshape((6,4))
for row, order_row in enumerate(row_order):
    for col, order_col in enumerate(col_order):
        colors_order[row, col] = colors[order_row, order_col] 
Traceback (most recent call last):
  File "C:\Users\jllav\Anaconda3\envs\DAHFI\lib\site-packages\IPython\core\interactiveshell.py", line 3457, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "<ipython-input-74-0c7b6076e300>", line 3, in <module>
    colors_order[row, col] = colors[order_row, order_col]
IndexError: index 4 is out of bounds for axis 1 with size 4
for row, order_row in enumerate(row_order):
    for col, order_col in enumerate(col_order):
        print(row, order_row, col, order_col)  
0 3 0 2
0 3 1 2
0 3 2 3
0 3 3 2
0 3 4 3
0 3 5 1
0 3 6 0
0 3 7 1
0 3 8 0
0 3 9 1
0 3 10 1
0 3 11 0
0 3 12 1
0 3 13 0
0 3 14 0
0 3 15 1
0 3 16 2
0 3 17 2
0 3 18 3
0 3 19 2
0 3 20 0
0 3 21 3
0 3 22 3
0 3 23 3
1 2 0 2
1 2 1 2
1 2 2 3
1 2 3 2
1 2 4 3
1 2 5 1
1 2 6 0
1 2 7 1
1 2 8 0
1 2 9 1
1 2 10 1
1 2 11 0
1 2 12 1
1 2 13 0
1 2 14 0
1 2 15 1
1 2 16 2
1 2 17 2
1 2 18 3
1 2 19 2
1 2 20 0
1 2 21 3
1 2 22 3
1 2 23 3
2 5 0 2
2 5 1 2
2 5 2 3
2 5 3 2
2 5 4 3
2 5 5 1
2 5 6 0
2 5 7 1
2 5 8 0
2 5 9 1
2 5 10 1
2 5 11 0
2 5 12 1
2 5 13 0
2 5 14 0
2 5 15 1
2 5 16 2
2 5 17 2
2 5 18 3
2 5 19 2
2 5 20 0
2 5 21 3
2 5 22 3
2 5 23 3
3 5 0 2
3 5 1 2
3 5 2 3
3 5 3 2
3 5 4 3
3 5 5 1
3 5 6 0
3 5 7 1
3 5 8 0
3 5 9 1
3 5 10 1
3 5 11 0
3 5 12 1
3 5 13 0
3 5 14 0
3 5 15 1
3 5 16 2
3 5 17 2
3 5 18 3
3 5 19 2
3 5 20 0
3 5 21 3
3 5 22 3
3 5 23 3
4 3 0 2
4 3 1 2
4 3 2 3
4 3 3 2
4 3 4 3
4 3 5 1
4 3 6 0
4 3 7 1
4 3 8 0
4 3 9 1
4 3 10 1
4 3 11 0
4 3 12 1
4 3 13 0
4 3 14 0
4 3 15 1
4 3 16 2
4 3 17 2
4 3 18 3
4 3 19 2
4 3 20 0
4 3 21 3
4 3 22 3
4 3 23 3
5 3 0 2
5 3 1 2
5 3 2 3
5 3 3 2
5 3 4 3
5 3 5 1
5 3 6 0
5 3 7 1
5 3 8 0
5 3 9 1
5 3 10 1
5 3 11 0
5 3 12 1
5 3 13 0
5 3 14 0
5 3 15 1
5 3 16 2
5 3 17 2
5 3 18 3
5 3 19 2
5 3 20 0
5 3 21 3
5 3 22 3
5 3 23 3
6 5 0 2
6 5 1 2
6 5 2 3
6 5 3 2
6 5 4 3
6 5 5 1
6 5 6 0
6 5 7 1
6 5 8 0
6 5 9 1
6 5 10 1
6 5 11 0
6 5 12 1
6 5 13 0
6 5 14 0
6 5 15 1
6 5 16 2
6 5 17 2
6 5 18 3
6 5 19 2
6 5 20 0
6 5 21 3
6 5 22 3
6 5 23 3
7 2 0 2
7 2 1 2
7 2 2 3
7 2 3 2
7 2 4 3
7 2 5 1
7 2 6 0
7 2 7 1
7 2 8 0
7 2 9 1
7 2 10 1
7 2 11 0
7 2 12 1
7 2 13 0
7 2 14 0
7 2 15 1
7 2 16 2
7 2 17 2
7 2 18 3
7 2 19 2
7 2 20 0
7 2 21 3
7 2 22 3
7 2 23 3
8 2 0 2
8 2 1 2
8 2 2 3
8 2 3 2
8 2 4 3
8 2 5 1
8 2 6 0
8 2 7 1
8 2 8 0
8 2 9 1
8 2 10 1
8 2 11 0
8 2 12 1
8 2 13 0
8 2 14 0
8 2 15 1
8 2 16 2
8 2 17 2
8 2 18 3
8 2 19 2
8 2 20 0
8 2 21 3
8 2 22 3
8 2 23 3
9 4 0 2
9 4 1 2
9 4 2 3
9 4 3 2
9 4 4 3
9 4 5 1
9 4 6 0
9 4 7 1
9 4 8 0
9 4 9 1
9 4 10 1
9 4 11 0
9 4 12 1
9 4 13 0
9 4 14 0
9 4 15 1
9 4 16 2
9 4 17 2
9 4 18 3
9 4 19 2
9 4 20 0
9 4 21 3
9 4 22 3
9 4 23 3
10 0 0 2
10 0 1 2
10 0 2 3
10 0 3 2
10 0 4 3
10 0 5 1
10 0 6 0
10 0 7 1
10 0 8 0
10 0 9 1
10 0 10 1
10 0 11 0
10 0 12 1
10 0 13 0
10 0 14 0
10 0 15 1
10 0 16 2
10 0 17 2
10 0 18 3
10 0 19 2
10 0 20 0
10 0 21 3
10 0 22 3
10 0 23 3
11 3 0 2
11 3 1 2
11 3 2 3
11 3 3 2
11 3 4 3
11 3 5 1
11 3 6 0
11 3 7 1
11 3 8 0
11 3 9 1
11 3 10 1
11 3 11 0
11 3 12 1
11 3 13 0
11 3 14 0
11 3 15 1
11 3 16 2
11 3 17 2
11 3 18 3
11 3 19 2
11 3 20 0
11 3 21 3
11 3 22 3
11 3 23 3
12 5 0 2
12 5 1 2
12 5 2 3
12 5 3 2
12 5 4 3
12 5 5 1
12 5 6 0
12 5 7 1
12 5 8 0
12 5 9 1
12 5 10 1
12 5 11 0
12 5 12 1
12 5 13 0
12 5 14 0
12 5 15 1
12 5 16 2
12 5 17 2
12 5 18 3
12 5 19 2
12 5 20 0
12 5 21 3
12 5 22 3
12 5 23 3
13 0 0 2
13 0 1 2
13 0 2 3
13 0 3 2
13 0 4 3
13 0 5 1
13 0 6 0
13 0 7 1
13 0 8 0
13 0 9 1
13 0 10 1
13 0 11 0
13 0 12 1
13 0 13 0
13 0 14 0
13 0 15 1
13 0 16 2
13 0 17 2
13 0 18 3
13 0 19 2
13 0 20 0
13 0 21 3
13 0 22 3
13 0 23 3
14 1 0 2
14 1 1 2
14 1 2 3
14 1 3 2
14 1 4 3
14 1 5 1
14 1 6 0
14 1 7 1
14 1 8 0
14 1 9 1
14 1 10 1
14 1 11 0
14 1 12 1
14 1 13 0
14 1 14 0
14 1 15 1
14 1 16 2
14 1 17 2
14 1 18 3
14 1 19 2
14 1 20 0
14 1 21 3
14 1 22 3
14 1 23 3
15 1 0 2
15 1 1 2
15 1 2 3
15 1 3 2
15 1 4 3
15 1 5 1
15 1 6 0
15 1 7 1
15 1 8 0
15 1 9 1
15 1 10 1
15 1 11 0
15 1 12 1
15 1 13 0
15 1 14 0
15 1 15 1
15 1 16 2
15 1 17 2
15 1 18 3
15 1 19 2
15 1 20 0
15 1 21 3
15 1 22 3
15 1 23 3
16 4 0 2
16 4 1 2
16 4 2 3
16 4 3 2
16 4 4 3
16 4 5 1
16 4 6 0
16 4 7 1
16 4 8 0
16 4 9 1
16 4 10 1
16 4 11 0
16 4 12 1
16 4 13 0
16 4 14 0
16 4 15 1
16 4 16 2
16 4 17 2
16 4 18 3
16 4 19 2
16 4 20 0
16 4 21 3
16 4 22 3
16 4 23 3
17 1 0 2
17 1 1 2
17 1 2 3
17 1 3 2
17 1 4 3
17 1 5 1
17 1 6 0
17 1 7 1
17 1 8 0
17 1 9 1
17 1 10 1
17 1 11 0
17 1 12 1
17 1 13 0
17 1 14 0
17 1 15 1
17 1 16 2
17 1 17 2
17 1 18 3
17 1 19 2
17 1 20 0
17 1 21 3
17 1 22 3
17 1 23 3
18 0 0 2
18 0 1 2
18 0 2 3
18 0 3 2
18 0 4 3
18 0 5 1
18 0 6 0
18 0 7 1
18 0 8 0
18 0 9 1
18 0 10 1
18 0 11 0
18 0 12 1
18 0 13 0
18 0 14 0
18 0 15 1
18 0 16 2
18 0 17 2
18 0 18 3
18 0 19 2
18 0 20 0
18 0 21 3
18 0 22 3
18 0 23 3
19 0 0 2
19 0 1 2
19 0 2 3
19 0 3 2
19 0 4 3
19 0 5 1
19 0 6 0
19 0 7 1
19 0 8 0
19 0 9 1
19 0 10 1
19 0 11 0
19 0 12 1
19 0 13 0
19 0 14 0
19 0 15 1
19 0 16 2
19 0 17 2
19 0 18 3
19 0 19 2
19 0 20 0
19 0 21 3
19 0 22 3
19 0 23 3
20 4 0 2
20 4 1 2
20 4 2 3
20 4 3 2
20 4 4 3
20 4 5 1
20 4 6 0
20 4 7 1
20 4 8 0
20 4 9 1
20 4 10 1
20 4 11 0
20 4 12 1
20 4 13 0
20 4 14 0
20 4 15 1
20 4 16 2
20 4 17 2
20 4 18 3
20 4 19 2
20 4 20 0
20 4 21 3
20 4 22 3
20 4 23 3
21 2 0 2
21 2 1 2
21 2 2 3
21 2 3 2
21 2 4 3
21 2 5 1
21 2 6 0
21 2 7 1
21 2 8 0
21 2 9 1
21 2 10 1
21 2 11 0
21 2 12 1
21 2 13 0
21 2 14 0
21 2 15 1
21 2 16 2
21 2 17 2
21 2 18 3
21 2 19 2
21 2 20 0
21 2 21 3
21 2 22 3
21 2 23 3
22 1 0 2
22 1 1 2
22 1 2 3
22 1 3 2
22 1 4 3
22 1 5 1
22 1 6 0
22 1 7 1
22 1 8 0
22 1 9 1
22 1 10 1
22 1 11 0
22 1 12 1
22 1 13 0
22 1 14 0
22 1 15 1
22 1 16 2
22 1 17 2
22 1 18 3
22 1 19 2
22 1 20 0
22 1 21 3
22 1 22 3
22 1 23 3
23 4 0 2
23 4 1 2
23 4 2 3
23 4 3 2
23 4 4 3
23 4 5 1
23 4 6 0
23 4 7 1
23 4 8 0
23 4 9 1
23 4 10 1
23 4 11 0
23 4 12 1
23 4 13 0
23 4 14 0
23 4 15 1
23 4 16 2
23 4 17 2
23 4 18 3
23 4 19 2
23 4 20 0
23 4 21 3
23 4 22 3
23 4 23 3
row_order
Out[76]: [3, 2, 5, 5, 3, 3, 5, 2, 2, 4, 0, 3, 5, 0, 1, 1, 4, 1, 0, 0, 4, 2, 1, 4]
col_order
Out[77]: [2, 2, 3, 2, 3, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 2, 2, 3, 2, 0, 3, 3, 3]
order = [(r, c) for row, col in zip(row_order, col_order)]
Traceback (most recent call last):
  File "C:\Users\jllav\Anaconda3\envs\DAHFI\lib\site-packages\IPython\core\interactiveshell.py", line 3457, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "<ipython-input-78-77f20c5d5134>", line 1, in <module>
    order = [(r, c) for row, col in zip(row_order, col_order)]
  File "<ipython-input-78-77f20c5d5134>", line 1, in <listcomp>
    order = [(r, c) for row, col in zip(row_order, col_order)]
NameError: name 'r' is not defined
order = [(r, c) for r, c in zip(row_order, col_order)]
order
Out[80]: 
[(3, 2),
 (2, 2),
 (5, 3),
 (5, 2),
 (3, 3),
 (3, 1),
 (5, 0),
 (2, 1),
 (2, 0),
 (4, 1),
 (0, 1),
 (3, 0),
 (5, 1),
 (0, 0),
 (1, 0),
 (1, 1),
 (4, 2),
 (1, 2),
 (0, 3),
 (0, 2),
 (4, 0),
 (2, 3),
 (1, 3),
 (4, 3)]
counter = 0
for row in colors_order:
    for col in colors_order:
        print(row, col)
['green_14' 'green_14' 'green_15' 'green_14'] ['green_14' 'green_14' 'green_15' 'green_14']
['green_14' 'green_14' 'green_15' 'green_14'] ['' '' '' '']
['green_14' 'green_14' 'green_15' 'green_14'] ['' '' '' '']
['green_14' 'green_14' 'green_15' 'green_14'] ['' '' '' '']
['green_14' 'green_14' 'green_15' 'green_14'] ['' '' '' '']
['green_14' 'green_14' 'green_15' 'green_14'] ['' '' '' '']
['' '' '' ''] ['green_14' 'green_14' 'green_15' 'green_14']
['' '' '' ''] ['' '' '' '']
['' '' '' ''] ['' '' '' '']
['' '' '' ''] ['' '' '' '']
['' '' '' ''] ['' '' '' '']
['' '' '' ''] ['' '' '' '']
['' '' '' ''] ['green_14' 'green_14' 'green_15' 'green_14']
['' '' '' ''] ['' '' '' '']
['' '' '' ''] ['' '' '' '']
['' '' '' ''] ['' '' '' '']
['' '' '' ''] ['' '' '' '']
['' '' '' ''] ['' '' '' '']
['' '' '' ''] ['green_14' 'green_14' 'green_15' 'green_14']
['' '' '' ''] ['' '' '' '']
['' '' '' ''] ['' '' '' '']
['' '' '' ''] ['' '' '' '']
['' '' '' ''] ['' '' '' '']
['' '' '' ''] ['' '' '' '']
['' '' '' ''] ['green_14' 'green_14' 'green_15' 'green_14']
['' '' '' ''] ['' '' '' '']
['' '' '' ''] ['' '' '' '']
['' '' '' ''] ['' '' '' '']
['' '' '' ''] ['' '' '' '']
['' '' '' ''] ['' '' '' '']
['' '' '' ''] ['green_14' 'green_14' 'green_15' 'green_14']
['' '' '' ''] ['' '' '' '']
['' '' '' ''] ['' '' '' '']
['' '' '' ''] ['' '' '' '']
['' '' '' ''] ['' '' '' '']
['' '' '' ''] ['' '' '' '']
colors_order
Out[83]: 
array([['green_14', 'green_14', 'green_15', 'green_14'],
       ['', '', '', ''],
       ['', '', '', ''],
       ['', '', '', ''],
       ['', '', '', ''],
       ['', '', '', '']], dtype='<U8')
colors_order = np.empty(dtype='<U8', shape=(6,4))
colors
Out[85]: 
array([['green_0', 'green_1', 'green_2', 'green_3'],
       ['green_4', 'green_5', 'green_6', 'green_7'],
       ['green_8', 'green_9', 'green_10', 'green_11'],
       ['green_12', 'green_13', 'green_14', 'green_15'],
       ['green_16', 'green_17', 'green_18', 'green_19'],
       ['green_20', 'green_21', 'green_22', 'green_23']], dtype='<U8')
counter = 0
for row in colors_order.shape[0]:
    for col in colors_order.shape[1]:
        colors_order[row, col] = colors[order]
        counter += 1
Traceback (most recent call last):
  File "C:\Users\jllav\Anaconda3\envs\DAHFI\lib\site-packages\IPython\core\interactiveshell.py", line 3457, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "<ipython-input-86-1b2a61e0c4ce>", line 2, in <module>
    for row in colors_order.shape[0]:
TypeError: 'int' object is not iterable
colors_order.shape
Out[87]: (6, 4)
colors_order.shape[0]
Out[88]: 6
counter = 0
for row in range(colors_order.shape[0]):
    for col in range(colors_order.shape[1]):
        colors_order[row, col] = colors[order]
        counter += 1
C:/Users/jllav/IdeaProjects/TFM/Experiments/Results/results_to_latex.py:4: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.
  from typing import Optional, List
Traceback (most recent call last):
  File "C:\Users\jllav\Anaconda3\envs\DAHFI\lib\site-packages\IPython\core\interactiveshell.py", line 3457, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "<ipython-input-89-825fa77a7818>", line 4, in <module>
    colors_order[row, col] = colors[order]
IndexError: too many indices for array: array is 2-dimensional, but 24 were indexed
counter = 0
for row in range(colors_order.shape[0]):
    for col in range(colors_order.shape[1]):
        colors_order[row, col] = colors[order[counter]]
        counter += 1
colors_order
Out[91]: 
array([['green_14', 'green_10', 'green_23', 'green_22'],
       ['green_15', 'green_13', 'green_20', 'green_9'],
       ['green_8', 'green_17', 'green_1', 'green_12'],
       ['green_21', 'green_0', 'green_4', 'green_5'],
       ['green_18', 'green_6', 'green_3', 'green_2'],
       ['green_16', 'green_11', 'green_7', 'green_19']], dtype='<U8')
order
Out[92]: 
[(3, 2),
 (2, 2),
 (5, 3),
 (5, 2),
 (3, 3),
 (3, 1),
 (5, 0),
 (2, 1),
 (2, 0),
 (4, 1),
 (0, 1),
 (3, 0),
 (5, 1),
 (0, 0),
 (1, 0),
 (1, 1),
 (4, 2),
 (1, 2),
 (0, 3),
 (0, 2),
 (4, 0),
 (2, 3),
 (1, 3),
 (4, 3)]
print(*order)
(3, 2) (2, 2) (5, 3) (5, 2) (3, 3) (3, 1) (5, 0) (2, 1) (2, 0) (4, 1) (0, 1) (3, 0) (5, 1) (0, 0) (1, 0) (1, 1) (4, 2) (1, 2) (0, 3) (0, 2) (4, 0) (2, 3) (1, 3) (4, 3)
colors[order[0]]
Out[94]: 'green_14'
counter = 0
for row in range(colors_order.shape[0]):
    for col in range(colors_order.shape[1]):
        colors_order[order[counter]] = colors[row, col]
        counter += 1
colors_order
Out[96]: 
array([['green_13', 'green_10', 'green_19', 'green_18'],
       ['green_14', 'green_15', 'green_17', 'green_22'],
       ['green_8', 'green_7', 'green_1', 'green_21'],
       ['green_11', 'green_5', 'green_0', 'green_4'],
       ['green_20', 'green_9', 'green_16', 'green_23'],
       ['green_6', 'green_12', 'green_3', 'green_2']], dtype='<U8')
counter = 0
for row in range(colors_order.shape[0]):
    for col in range(colors_order.shape[1]):
        colors_order[order[counter]] = colors[row, col]
        counter += 1
len(columns_list)
Out[98]: 4
len(index_list)
Out[99]: 6
